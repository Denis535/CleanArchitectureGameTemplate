// create-view
create-view(color, font, text, background-color, background-image, border-color, border-radius)
    foreground = create-foreground(color, font, text)
    background = create-background(background-color, background-image)
    border     = create-border(border-color, border-radius)
    merge(foreground, background, border)

// create-view
create-foreground(color, font = null, text = null)
    foreground = { color: color }
    merge(foreground, font, text)
create-font(url = null, size = null, style = null)
    return {
        font-url:            url,
        font-definition-url: url,
        font-size:           size,
        font-style:          style,
    }
create-text(align = null, outline = null, shadow = null)
    return {
        text-align:   align,
        text-outline: outline,
        text-shadow:  shadow,
    }

// create-view
create-background(color, image = null)
    background = { background-color: color }
    merge(background, image)
create-background-image(url = null, color = null, scale-mode = null, slice-left = null, slice-right = null, slice-top = null, slice-bottom = null, slice-scale = null)
    return {
        background-image-url:          url,
        background-image-color:        color,
        background-image-scale-mode:   scale-mode,
        background-image-slice-left:   slice-left,
        background-image-slice-right:  slice-right,
        background-image-slice-top:    slice-top,
        background-image-slice-bottom: slice-bottom,
        background-image-slice-scale:  slice-scale,
    }

// create-view
create-border(color, radius)
    border-color  = create-border-color(color)
    border-radius = create-border-radius(radius)
    merge(border-color, border-radius)
create-border-color(color)
    return {
        border-left-color:          color[0],
        border-right-color:         color[1] or color[0],
        border-top-color:           color[2] or color[0],
        border-bottom-color:        color[3] or color[0],
    }
create-border-radius(radius)
    return {
        border-top-left-radius:     radius[0],
        border-top-right-radius:    radius[1] or radius[0],
        border-bottom-left-radius:  radius[2] or radius[0],
        border-bottom-right-radius: radius[3] or radius[0],
    }

// create-layout
create-layout(position, width, height, margin, border, padding)
    position = create-position(position)
    size     = create-size(width, height)
    box      = create-box(margin, border, padding)
    merge(position, size, box)

// create-layout
create-position(position, left = null, right = null, top = null, bottom = null)
    return {
        position: position[0],
        left:     left   or position[1],
        right:    right  or position[2],
        top:      top    or position[3],
        bottom:   bottom or position[4],
    }

// create-layout
create-size(width, height)
    width  = create-width(width)
    height = create-height(height)
    merge(width, height)
create-width(width)
    return {
        width:      width[0],
        min-width:  width[1],
        max-width:  width[2],
    }
create-height(height)
    return {
        height:      height[0],
        min-height:  height[1],
        max-height:  height[2],
    }

// create-layout
create-box(margin, border, padding)
    margin       = create-margin(margin)
    border-width = create-border-width(border)
    padding      = create-padding(padding)
    merge(margin, border-width, padding)
create-margin(margin, left = null, right = null, top = null, bottom = null)
    return {
        margin-left:   left   or margin[0],
        margin-right:  right  or margin[1] or margin[0],
        margin-top:    top    or margin[2] or margin[0],
        margin-bottom: bottom or margin[3] or margin[0],
    }
create-border-width(border, left = null, right = null, top = null, bottom = null)
    return {
        border-left-width:   left   or border[0],
        border-right-width:  right  or border[1] or border[0],
        border-top-width:    top    or border[2] or border[0],
        border-bottom-width: bottom or border[3] or border[0],
    }
create-padding(padding, left = null, right = null, top = null, bottom = null)
    return {
        padding-left:   left   or padding[0],
        padding-right:  right  or padding[1] or padding[0],
        padding-top:    top    or padding[2] or padding[0],
        padding-bottom: bottom or padding[3] or padding[0],
    }

// create-flex
create-flex(flex-grow, flex-shrink, flex-basis, align-self)
    return {
        flex-grow:   flex-grow,
        flex-shrink: flex-shrink,
        flex-basis:  flex-basis,
        align-self:  align-self,
    }
create-flex2(flex-direction, justify-content, align-items)
    return {
        flex-direction:  flex-direction,
        justify-content: justify-content,
        align-items:     align-items,
    }

// add-view
add-view(color = null, font = null, text = null, background-color = null, background-image = null, border-color = null, border-radius = null)
    add-style create-view(color, font, text, background-color, background-image, border-color, border-radius)
add-view-foreground(color, font, text)
    add-style create-foreground(color, font, text)
add-view-background(background-color, background-image)
    add-style create-background(background-color, background-image)
add-view-border(border-color, border-radius)
    add-style create-border(border-color, border-radius)

// add-layout
add-layout(position = null, width = null, height = null, margin = null, border = null, padding = null)
    add-style create-layout(position, width, height, margin, border, padding)
add-layout-position(position, left = null, right = null, top = null, bottom = null)
    add-style create-position(position, left, right, top, bottom)
add-layout-size(width, height)
    add-style create-size(width, height)
add-layout-box(margin, border, padding)
    add-style create-box(margin, border, padding)

// add-flex
add-flex(flex-grow, flex-shrink, flex-basis, align-self)
    add-style create-flex(flex-grow, flex-shrink, flex-basis, align-self)
add-flex2(flex-direction, justify-content, align-items)
    add-style create-flex2(flex-direction, justify-content, align-items)

// add-style
add-style(objects...)
    for object in objects
        add-style-internal(object)
add-style-internal(object)
    if object != null and get-type(object) != null
        if get-type(object) == 'Expression'
            for obj in object
                add-style-internal(obj)
        else if get-type(object) == 'Object'
            for key, value in object
                add-style-property key, value
        else
            error('Object is invalid: ' + object)

// add-style-property
add-style-property(property, value)
    property = get-style-property(property)
    property = get-unity-style-property(property)
    if value != null
        value = get-style-value(value, property)
        add-property property, value

// get-style-property
get-style-property(property)
    // foreground
    return 'color'                       if property == 'color'
    // font
    return 'font'                        if property == 'font-url'
    return 'font-definition'             if property == 'font-definition-url'
    return 'font-size'                   if property == 'font-size'
    return 'font-style'                  if property == 'font-style'
    // text
    return 'text-align'                  if property == 'text-align'
    return 'text-outline'                if property == 'text-outline'
    return 'text-shadow'                 if property == 'text-shadow'
    // background
    return 'background-color'            if property == 'background-color'
    // background
    return 'background-image'            if property == 'background-image-url'
    return 'background-image-tint-color' if property == 'background-image-color'
    return 'background-scale-mode'       if property == 'background-image-scale-mode'
    return 'slice-left'                  if property == 'background-image-slice-left'
    return 'slice-right'                 if property == 'background-image-slice-right'
    return 'slice-top'                   if property == 'background-image-slice-top'
    return 'slice-bottom'                if property == 'background-image-slice-bottom'
    return 'slice-scale'                 if property == 'background-image-slice-scale'
    // border
    return 'border-left-color'           if property == 'border-left-color'
    return 'border-right-color'          if property == 'border-right-color'
    return 'border-top-color'            if property == 'border-top-color'
    return 'border-bottom-color'         if property == 'border-bottom-color'
    // border
    return 'border-top-left-radius'      if property == 'border-top-left-radius'
    return 'border-top-right-radius'     if property == 'border-top-right-radius'
    return 'border-bottom-left-radius'   if property == 'border-bottom-left-radius'
    return 'border-bottom-right-radius'  if property == 'border-bottom-right-radius'
    // position
    return 'position'                    if property == 'position'
    return 'left'                        if property == 'left'
    return 'right'                       if property == 'right'
    return 'top'                         if property == 'top'
    return 'bottom'                      if property == 'bottom'
    // width
    return 'width'                       if property == 'width'
    return 'min-width'                   if property == 'min-width'
    return 'max-width'                   if property == 'max-width'
    // height
    return 'height'                      if property == 'height'
    return 'min-height'                  if property == 'min-height'
    return 'max-height'                  if property == 'max-height'
    // margin
    return 'margin'                      if property == 'margin'
    return 'margin-left'                 if property == 'margin-left'
    return 'margin-right'                if property == 'margin-right'
    return 'margin-top'                  if property == 'margin-top'
    return 'margin-bottom'               if property == 'margin-bottom'
    // border
    return 'border'                      if property == 'border'
    return 'border-left-width'           if property == 'border-left-width'
    return 'border-right-width'          if property == 'border-right-width'
    return 'border-top-width'            if property == 'border-top-width'
    return 'border-bottom-width'         if property == 'border-bottom-width'
    // padding
    return 'padding'                     if property == 'padding'
    return 'padding-left'                if property == 'padding-left'
    return 'padding-right'               if property == 'padding-right'
    return 'padding-top'                 if property == 'padding-top'
    return 'padding-bottom'              if property == 'padding-bottom'
    // flex
    return 'flex-grow'                   if property == 'flex-grow'
    return 'flex-shrink'                 if property == 'flex-shrink'
    return 'flex-basis'                  if property == 'flex-basis'
    return 'align-self'                  if property == 'align-self'
    // flex
    return 'flex-direction'              if property == 'flex-direction'
    return 'flex-wrap'                   if property == 'flex-wrap'
    return 'justify-content'             if property == 'justify-content'
    return 'align-items'                 if property == 'align-items'
    return 'align-content'               if property == 'align-content'
    // misc
    property

// get-unity-style-property
get-unity-style-property(property)
    // view
    return '-unity-' + property if property == 'overflow-clip-box'
    // font
    return '-unity-' + property if property == 'font'
    return '-unity-' + property if property == 'font-definition'
    return '-unity-' + property if property == 'font-style'
    // text
    return '-unity-' + property if property == 'text-align'
    return '-unity-' + property if property == 'text-outline'
    return '-unity-' + property if property == 'text-outline-width'
    return '-unity-' + property if property == 'text-outline-color'
    return '-unity-' + property if property == 'text-overflow-position'
    return '-unity-' + property if property == 'paragraph-spacing'
    // background
    return '-unity-' + property if property == 'background-image-tint-color'
    return '-unity-' + property if property == 'background-scale-mode'
    return '-unity-' + property if property == 'slice-left'
    return '-unity-' + property if property == 'slice-right'
    return '-unity-' + property if property == 'slice-top'
    return '-unity-' + property if property == 'slice-bottom'
    return '-unity-' + property if property == 'slice-scale'
    // misc
    property

// get-style-value
get-style-value(value, property)
    // todo: does this support addressables?
    return s("url('%s')", unquote(value)) if property == '-unity-font'
    return s("url('%s')", unquote(value)) if property == '-unity-font-definition'
    return s("url('%s')", unquote(value)) if property == 'background-image'
    value

// has
has(obj, key)
    if obj != null
        get-string(key) in obj
    else
        key = get-string(key)
        key is defined

// get
get(obj, key)
    if obj != null
        obj[get-string(key)]
    else
        lookup(get-string(key))
