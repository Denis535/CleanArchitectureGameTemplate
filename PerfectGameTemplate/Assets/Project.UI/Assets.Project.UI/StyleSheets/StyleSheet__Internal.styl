// create-view-skin
create-view-skin(foreground, background, border)
    return {
        foreground: foreground,
        background: background,
        border:     border
    }
create-foreground(color, font, text)
    return {
        color: get-theme-color(color),
        font:  font,
        text:  text
    }
create-background(color, image_)
    return {
        color: get-theme-background-color(color),
        image: get-theme-background-image(image_)
    }
create-border(color, radius)
    return {
        color:  get-theme-border-color(color),
        radius: get-theme-border-radius(radius)
    }
fnt(url = null, size = null, style = null)
    return {
        url:   url,
        size:  size,
        style: style
    }
txt(align = null, outline = null, shadow = null)
    return {
        align:   align,
        outline: outline,
        shadow:  shadow
    }
img(url = null, color = null, scale-mode = null, slice-left = null, slice-right = null, slice-top = null, slice-bottom = null, slice-scale = null)
    return {
        url:          url,
        color:        color,
        scale-mode:   scale-mode,
        slice-left:   slice-left,
        slice-right:  slice-right,
        slice-top:    slice-top,
        slice-bottom: slice-bottom,
        slice-scale:  slice-scale
    }

// create-layout-skin
create-layout-skin(position, size, box)
    return {
        position: position,
        size:     size,
        box:      box
    }
create-position(position, left = null, right = null, top = null, bottom = null)
    return {
        position: position,
        left:     left,
        right:    right,
        top:      top,
        bottom:   bottom
    }
create-size(width, height)
    return {
        width:  width,
        height: height
    }
create-box(margin, border, padding)
    return {
        margin:  margin,
        border:  border,
        padding: padding
    }

// add-view-skin
add-view-skin(view)
    if view != null
        view             = get-view-skin(view) if typeof(view) != 'object'
        color            = view.foreground['color']
        font             = view.foreground['font' ]
        text             = view.foreground['text' ]
        background-color = view.background['color']
        background-image = view.background['image']
        border-color     = view.border['color' ]
        border-radius    = view.border['radius']
        add-view-foreground color, font, text
        add-view-background background-color, background-image
        add-view-border     border-color, border-radius

add-view-skin-with-alpha(view, alpha)
    view = get-view-skin(view)
    view.background.color = alpha(view.background.color, alpha(view.background.color) * alpha      ) if view.background.color != null
    view.border.color     = alpha(view.border.color,     alpha(view.border.color    ) * (alpha+3)/4) if view.border.color     != null
    add-view-skin(view)

add-view-skin-light-gradient(view)
    &.light
        add-view-skin-with-alpha(view, alpha: 0.00)
    &.light-0
        add-view-skin-with-alpha(view, alpha: 0.00)
    &.light-1
        add-view-skin-with-alpha(view, alpha: 0.10)
    &.light-2
        add-view-skin-with-alpha(view, alpha: 0.20)
    &.light-3
        add-view-skin-with-alpha(view, alpha: 0.30)
    &.light-4
        add-view-skin-with-alpha(view, alpha: 0.40)
    &.light-5
        add-view-skin-with-alpha(view, alpha: 0.50)
    &.light-6
        add-view-skin-with-alpha(view, alpha: 0.60)
    &.light-7
        add-view-skin-with-alpha(view, alpha: 0.70)
    &.light-8
        add-view-skin-with-alpha(view, alpha: 0.80)
    &.light-9
        add-view-skin-with-alpha(view, alpha: 0.90)
    &.light-10
        add-view-skin-with-alpha(view, alpha: 1.00)

add-view-skin-dark-gradient(view)
    &.dark
        add-view-skin-with-alpha(view, alpha: 0.00)
    &.dark-0
        add-view-skin-with-alpha(view, alpha: 0.00)
    &.dark-1
        add-view-skin-with-alpha(view, alpha: 0.10)
    &.dark-2
        add-view-skin-with-alpha(view, alpha: 0.20)
    &.dark-3
        add-view-skin-with-alpha(view, alpha: 0.30)
    &.dark-4
        add-view-skin-with-alpha(view, alpha: 0.40)
    &.dark-5
        add-view-skin-with-alpha(view, alpha: 0.50)
    &.dark-6
        add-view-skin-with-alpha(view, alpha: 0.60)
    &.dark-7
        add-view-skin-with-alpha(view, alpha: 0.70)
    &.dark-8
        add-view-skin-with-alpha(view, alpha: 0.80)
    &.dark-9
        add-view-skin-with-alpha(view, alpha: 0.90)
    &.dark-10
        add-view-skin-with-alpha(view, alpha: 1.00)

// add-layout-skin
add-layout-skin(layout)
    if layout != null
        layout   = get-layout-skin(layout) if typeof(layout) != 'object'
        position = layout.position['position']
        left     = layout.position['left'    ]
        right    = layout.position['right'   ]
        top      = layout.position['top'     ]
        bottom   = layout.position['bottom'  ]
        width    = layout.size['width' ]
        height   = layout.size['height']
        margin   = layout.box['margin' ]
        border   = layout.box['border' ]
        padding  = layout.box['padding']
        add-layout-position position, left, right, top, bottom
        add-layout-size     width, height
        add-layout-box      margin, border, padding

// add-view
add-view(color = null, font = null, text = null, background-color = null, background-image = null, border-color = null, border-radius = null)
    add-view-foreground color, font, text
    add-view-background background-color, background-image
    add-view-border     border-color, border-radius
add-view-foreground(color, font, text)
    add-property 'color',           color
    add-property 'font',            font.url     if font != null
    add-property 'font-definition', font.url     if font != null
    add-property 'font-size',       font.size    if font != null
    add-property 'font-style',      font.style   if font != null
    add-property 'text-align',      text.align   if text != null
    add-property 'text-outline',    text.outline if text != null
    add-property 'text-shadow',     text.shadow  if text != null
add-view-background(background-color, background-image)
    add-property 'background-color',            background-color
    add-property 'background-image',            background-image.url          if background-image != null
    add-property 'background-image-tint-color', background-image.color        if background-image != null
    add-property 'background-scale-mode',       background-image.scale-mode   if background-image != null
    add-property 'slice-left',                  background-image.slice-left   if background-image != null
    add-property 'slice-right',                 background-image.slice-right  if background-image != null
    add-property 'slice-top',                   background-image.slice-top    if background-image != null
    add-property 'slice-bottom',                background-image.slice-bottom if background-image != null
    add-property 'slice-scale',                 background-image.slice-scale  if background-image != null
add-view-border(border-color, border-radius)
    add-property 'border-left-color',          border-color[0]                   
    add-property 'border-right-color',         border-color[1] or border-color[0]
    add-property 'border-top-color',           border-color[2] or border-color[0]
    add-property 'border-bottom-color',        border-color[3] or border-color[0]
    add-property 'border-top-left-radius',     border-radius[0]                    
    add-property 'border-top-right-radius',    border-radius[1] or border-radius[0]
    add-property 'border-bottom-left-radius',  border-radius[2] or border-radius[0]
    add-property 'border-bottom-right-radius', border-radius[3] or border-radius[0]

// add-layout
add-layout(position = null, width = null, height = null, margin = null, border = null, padding = null)
    add-layout-position position
    add-layout-size     width, height
    add-layout-box      margin, border, padding
add-layout-position(position, left = null, right = null, top = null, bottom = null)
    add-property 'position', position[0]
    add-property 'left',     position[1] or left
    add-property 'right',    position[2] or right
    add-property 'top',      position[3] or top
    add-property 'bottom',   position[4] or bottom
add-layout-size(width, height)
    add-property 'width',      width[0]
    add-property 'min-width',  width[1]
    add-property 'max-width',  width[2]
    add-property 'height',     height[0]
    add-property 'min-height', height[1]
    add-property 'max-height', height[2]
add-layout-box(margin, border, padding)
    add-property 'margin-left',         margin[0]
    add-property 'margin-right',        margin[1] or margin[0]
    add-property 'margin-top',          margin[2] or margin[0]
    add-property 'margin-bottom',       margin[3] or margin[0]
    add-property 'border-left-width',   border[0]
    add-property 'border-right-width',  border[1] or border[0]
    add-property 'border-top-width',    border[2] or border[0]
    add-property 'border-bottom-width', border[3] or border[0]
    add-property 'padding-left',        padding[0]
    add-property 'padding-right',       padding[1] or padding[0]
    add-property 'padding-top',         padding[2] or padding[0]
    add-property 'padding-bottom',      padding[3] or padding[0]

// add-flex
add-flex(flex-grow, flex-shrink, flex-basis, align-self)
    add-property 'flex-grow',   flex-grow
    add-property 'flex-shrink', flex-shrink
    add-property 'flex-basis',  flex-basis
    add-property 'align-self',  align-self
add-flex2(flex-direction, justify-content, align-items)
    add-property 'flex-direction',  flex-direction
    add-property 'flex-wrap',       null
    add-property 'justify-content', justify-content
    add-property 'align-items',     align-items
    add-property 'align-content',   null

// add-property
add-property(property, value)
    property = get-unity-property(property) if property == 'overflow-clip-box'
    property = get-unity-property(property) if property == 'font'
    property = get-unity-property(property) if property == 'font-definition'
    property = get-unity-property(property) if property == 'font-style'
    property = get-unity-property(property) if property == 'text-align'
    property = get-unity-property(property) if property == 'text-outline'
    property = get-unity-property(property) if property == 'text-outline-width'
    property = get-unity-property(property) if property == 'text-outline-color'
    property = get-unity-property(property) if property == 'text-overflow-position'
    property = get-unity-property(property) if property == 'paragraph-spacing'
    property = get-unity-property(property) if property == 'background-image-tint-color'
    property = get-unity-property(property) if property == 'background-scale-mode'
    property = get-unity-property(property) if property == 'slice-left'
    property = get-unity-property(property) if property == 'slice-right'
    property = get-unity-property(property) if property == 'slice-top'
    property = get-unity-property(property) if property == 'slice-bottom'
    property = get-unity-property(property) if property == 'slice-scale'
    value = get-url-value(value) if property == '-unity-font'
    value = get-url-value(value) if property == '-unity-font-definition'
    value = get-url-value(value) if property == 'background-image'
    if value != null
        {property} value
get-unity-property(property)
    if property != null
        property = get-string(property)
        return s("-unity-%s", property)
    null
get-url-value(url)
    // todo: does this support addressables?
    if url != null
        url = get-string(url)
        return s("url('%s')", url)
    null

// get-theme-value
get-theme-color(key)
    if key != null
        return get(theme.color, key) if contains(theme.color, key)
        error('Theme has no color: ' + get-string(key))
    null
get-theme-background-color(key)
    if key != null
        return get(theme.background-color, key) if contains(theme.background-color, key)
        return get(theme.color,            key) if contains(theme.color,            key)
        error('Theme has no background-color: ' + get-string(key))
    null
get-theme-background-image(key)
    if key != null
        return get(theme.background-image, key) if contains(theme.background-image, key)                              
        error('Theme has no background-image: ' + get-string(key))
    null
get-theme-border-color(key)
    if key != null
        return get(theme.border-color, key) if contains(theme.border-color, key)
        return get(theme.color,        key) if contains(theme.color,        key)
        error('Theme has no border-color: ' + get-string(key))
    null
get-theme-border-radius(key)
    if key != null
        return get(theme.border-radius, key) if contains(theme.border-radius, key)                              
        error('Theme has no border-radius: ' + get-string(key))
    null

// get-view-skin
get-view-skin(view)
    if view != null
        view = views[get-string(view)] or error('Views has no view: ' + get-string(view))
        return clone(view)
    null

// get-layout-skin
get-layout-skin(layout)
    if layout != null
        layout = layouts[get-string(layout)] or error('Layouts has no layout: ' + get-string(layout))
        return clone(layout)
    null

// helpers
contains(obj, key)
    get-string(key) in obj
get(obj, key)
    obj[get-string(key)]
