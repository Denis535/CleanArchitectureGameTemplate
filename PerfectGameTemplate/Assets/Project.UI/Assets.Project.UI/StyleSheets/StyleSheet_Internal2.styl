// view
foreground(color, font, text)
    return {
        color: color,
        font:  font,
        text:  text
    }
background(color, image)
    return {
        color: color,
        image: image
    }
border(color, radius)
    return {
        color:  color,
        radius: radius
    }
// view
fnt(url, size, style)
    return {
        url:   url,
        size:  size,
        style: style
    }
txt(align, outline = null, shadow = null)
    return {
        align:   align,
        outline: outline,
        shadow:  shadow
    }
img(url, color = null, scale-mode = null, slice-left = null, slice-right = null, slice-top = null, slice-bottom = null, slice-scale = null)
    return {
        url:          url,
        color:        color,
        scale-mode:   scale-mode,
        slice-left:   slice-left,
        slice-right:  slice-right,
        slice-top:    slice-top,
        slice-bottom: slice-bottom,
        slice-scale:  slice-scale
    }
// layout
pos(position, left, right, top, bottom)
    return {
        position: position[0],
        left:     left   or position[1],
        right:    right  or position[2],
        top:      top    or position[3],
        bottom:   bottom or position[4]
    }
size(width, height)
    return {
        width:  width,
        height: height
    }
box(margin, border, padding)
    return {
        margin:  margin,
        border:  border,
        padding: padding
    }

// add-view
add-view(foreground, background, border)
    add-view-foreground get(foreground, 'color'), get(foreground, 'font'), get(foreground, 'text')
    add-view-background get(background, 'color'), get(background, 'image')
    add-view-border     get(border, 'color'), get(border, 'radius')
// add-view
add-view-foreground(color, font, text)
    add-property 'color',           color
    add-property 'font',            get(font, 'url'    )
    add-property 'font-definition', get(font, 'url'    )
    add-property 'font-size',       get(font, 'size'   )
    add-property 'font-style',      get(font, 'style'  )
    add-property 'text-align',      get(text, 'align'  )
    add-property 'text-outline',    get(text, 'outline')
    add-property 'text-shadow',     get(text, 'shadow' )
// add-view
add-view-background(background-color, background-image)
    add-property 'background-color',            background-color
    add-property 'background-image',            get(background-image, 'url'         )
    add-property 'background-image-tint-color', get(background-image, 'color'       )
    add-property 'background-scale-mode',       get(background-image, 'scale-mode'  )
    add-property 'slice-left',                  get(background-image, 'slice-left'  )
    add-property 'slice-right',                 get(background-image, 'slice-right' )
    add-property 'slice-top',                   get(background-image, 'slice-top'   )
    add-property 'slice-bottom',                get(background-image, 'slice-bottom')
    add-property 'slice-scale',                 get(background-image, 'slice-scale' )
// add-view
add-view-border(border-color, border-radius)
    add-property 'border-left-color',          border-color[0]                   
    add-property 'border-right-color',         border-color[1] or border-color[0]
    add-property 'border-top-color',           border-color[2] or border-color[0]
    add-property 'border-bottom-color',        border-color[3] or border-color[0]
    add-property 'border-top-left-radius',     border-radius[0]                    
    add-property 'border-top-right-radius',    border-radius[1] or border-radius[0]
    add-property 'border-bottom-left-radius',  border-radius[2] or border-radius[0]
    add-property 'border-bottom-right-radius', border-radius[3] or border-radius[0]

// add-layout
add-layout(position, size, box)
    add-layout-position get(position, 'position'), get(position, 'left'), get(position, 'right'), get(position, 'top'), get(position, 'bottom')
    add-layout-size     get(size, 'width'), get(size, 'height')
    add-layout-box      get(box, 'margin'), get(box, 'border'), get(box, 'padding')
// add-layout
add-layout-position(position, left = null, right = null, top = null, bottom = null)
    add-property 'position', position
    add-property 'left',     left
    add-property 'right',    right
    add-property 'top',      top
    add-property 'bottom',   bottom
// add-layout
add-layout-size(width, height)
    add-property 'width',      width[0]
    add-property 'min-width',  width[1]
    add-property 'max-width',  width[2]
    add-property 'height',     height[0]
    add-property 'min-height', height[1]
    add-property 'max-height', height[2]
// add-layout
add-layout-box(margin, border, padding)
    add-property 'margin-left',         margin[0]
    add-property 'margin-right',        margin[1] or margin[0]
    add-property 'margin-top',          margin[2] or margin[0]
    add-property 'margin-bottom',       margin[3] or margin[0]
    add-property 'border-left-width',   border[0]
    add-property 'border-right-width',  border[1] or border[0]
    add-property 'border-top-width',    border[2] or border[0]
    add-property 'border-bottom-width', border[3] or border[0]
    add-property 'padding-left',        padding[0]
    add-property 'padding-right',       padding[1] or padding[0]
    add-property 'padding-top',         padding[2] or padding[0]
    add-property 'padding-bottom',      padding[3] or padding[0]

// add-flex
add-flex(flex-grow, flex-shrink, flex-basis, align-self)
    add-property 'flex-grow',   flex-grow
    add-property 'flex-shrink', flex-shrink
    add-property 'flex-basis',  flex-basis
    add-property 'align-self',  align-self
// add-flex
add-flex2(flex-direction, justify-content, align-items)
    add-property 'flex-direction',  flex-direction
    add-property 'flex-wrap',       null
    add-property 'justify-content', justify-content
    add-property 'align-items',     align-items
    add-property 'align-content',   null

// add-property
add-property(property, value)
    property = get-unity-property(property) if property == 'overflow-clip-box'
    property = get-unity-property(property) if property == 'font'
    property = get-unity-property(property) if property == 'font-definition'
    property = get-unity-property(property) if property == 'font-style'
    property = get-unity-property(property) if property == 'text-align'
    property = get-unity-property(property) if property == 'text-outline'
    property = get-unity-property(property) if property == 'text-outline-width'
    property = get-unity-property(property) if property == 'text-outline-color'
    property = get-unity-property(property) if property == 'text-overflow-position'
    property = get-unity-property(property) if property == 'paragraph-spacing'
    property = get-unity-property(property) if property == 'background-image-tint-color'
    property = get-unity-property(property) if property == 'background-scale-mode'
    property = get-unity-property(property) if property == 'slice-left'
    property = get-unity-property(property) if property == 'slice-right'
    property = get-unity-property(property) if property == 'slice-top'
    property = get-unity-property(property) if property == 'slice-bottom'
    property = get-unity-property(property) if property == 'slice-scale'
    value = get-url-value(value) if property == '-unity-font'
    value = get-url-value(value) if property == '-unity-font-definition'
    value = get-url-value(value) if property == 'background-image'
    if value != null
        {property} value
get-unity-property(property)
    if property != null
        property = get-string(property)
        return s("-unity-%s", property)
    null
get-url-value(url)
    // todo: does this support addressables?
    if url != null
        url = get-string(url)
        return s("url('%s')", url)
    null

// get
get(obj, keys...)
    value = obj
    for key in keys
        value = value[key] if value != null
    value

// invoke
invoke(func, args...)
    func(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15])